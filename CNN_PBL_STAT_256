{"cells":[{"cell_type":"markdown","metadata":{"id":"8cryo4QbQqHe"},"source":["# 데이터 셋 만들기"]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":3938,"status":"ok","timestamp":1654419896617,"user":{"displayName":"­신호중","userId":"02473414572631522916"},"user_tz":-540},"id":"MQOh2i1WJd4V"},"outputs":[],"source":["from IPython.display import display\n","from PIL import Image\n","\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import matplotlib.pyplot as plt\n","\n","import pandas as pd\n","import numpy as np\n","\n","import random\n","\n","import torchvision.transforms as transforms\n","\n","import os\n","\n","from matplotlib.pyplot import imshow\n","\n","from torch.utils.data import Dataset, DataLoader\n","import torch.nn.functional as F\n","\n","import matplotlib.image as img\n","from sklearn.model_selection import train_test_split\n","\n","torch.manual_seed(0)\n","torch.cuda.manual_seed(0)\n","torch.cuda.manual_seed_all(0)\n","torch.backends.cudnn.deterministic = True\n","torch.backends.cudnn.benchmark = False\n","np.random.seed(0)\n","random.seed(0)\n","\n","\n","if torch.cuda.is_available():\n","    device = torch.device('cuda')\n","else:\n","    device = torch.device('cpu')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24732,"status":"ok","timestamp":1654419921791,"user":{"displayName":"­신호중","userId":"02473414572631522916"},"user_tz":-540},"id":"uptSHhfXJ366","outputId":"fe861ab9-7474-40f7-e01c-badc3d53ff95"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1654419921791,"user":{"displayName":"­신호중","userId":"02473414572631522916"},"user_tz":-540},"id":"E78bKNwtH1T5"},"outputs":[],"source":["class CustomDataset(Dataset):\n","  def __init__(self, imgs, malices, names):\n","        super().__init__()\n","        self.imgs = imgs\n","        self.malices = malices\n","        self.names = names\n","        \n","  def __len__(self):\n","      return len(self.imgs)\n","  \n","  def __getitem__(self,index):\n","      return self.imgs[index], self.malices[index], self.names[index]"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":10798,"status":"ok","timestamp":1654419932587,"user":{"displayName":"­신호중","userId":"02473414572631522916"},"user_tz":-540},"id":"9Fj0resvJrpm"},"outputs":[],"source":["from zipfile import ZipFile\n","from PIL import Image\n","import zipfile\n","import cv2\n","\n","import random\n","\n","def convertPILImageToCV2(pil_image):\n","  np_image = np.array(pil_image)\n","  open_cv_image = np.array(pil_image) \n","\n","  open_cv_image = open_cv_image[:, :, ::-1].copy() \n","\n","  return open_cv_image\n","\n","benign_path = '/content/drive/MyDrive/Malware Analysis/kisa_dataset/benign_image.zip'\n","malign_path = '/content/drive/MyDrive/Malware Analysis/kisa_dataset/malign_image.zip'\n","benign_zip = ZipFile(benign_path,'r')\n","malign_zip = ZipFile(malign_path,'r')\n","\n","#benign\n","benign_info_list = benign_zip.infolist()\n","benign_name_list = benign_zip.namelist()\n","malign_info_list = malign_zip.infolist()\n","malign_name_list = malign_zip.namelist()\n","\n","benign_set = []\n","malign_set = []\n","\n","\n","\n","for i in range(len(benign_info_list)):\n","  _file = benign_zip.open(benign_info_list[i])\n","  img = Image.open(_file)\n","  img = convertPILImageToCV2(img)\n","  name = benign_name_list[i]\n","  benign_set.append((img, 0, name))\n","  \n","\n","for i in range(len(malign_info_list)):\n","  _file = malign_zip.open(malign_info_list[i])\n","  img = Image.open(_file)\n","  img = convertPILImageToCV2(img)\n","  name = malign_name_list[i]\n","  malign_set.append((img, 1, name))\n","  \n","\n","num_each_test = 400\n","\n","raw_test_set = benign_set[:num_each_test] + malign_set[:num_each_test]\n","# random.shuffle(raw_test_set)\n","raw_train_set = benign_set[num_each_test:] + malign_set[num_each_test:]\n","# random.shuffle(raw_train_set)\n"]},{"cell_type":"markdown","metadata":{"id":"Hn0zewKXsCDS"},"source":["## Normalizing"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4732,"status":"ok","timestamp":1654419937308,"user":{"displayName":"­신호중","userId":"02473414572631522916"},"user_tz":-540},"id":"ALEm0HfVqnbW","outputId":"c67facd9-a516-4ab4-86ba-aa7ef8b06c1d"},"outputs":[{"output_type":"stream","name":"stdout","text":["-1.0\n","-0.10260687918659961\n"]}],"source":["train_meanRGB = [np.mean(x, axis=(1,2)) for x,_, __ in raw_train_set]\n","train_stdRGB = [np.std(x, axis=(1,2)) for x,_, __ in raw_train_set]\n","\n","train_meanR = np.mean([m[0] for m in train_meanRGB])\n","train_meanG = np.mean([m[1] for m in train_meanRGB])\n","train_meanB = np.mean([m[2] for m in train_meanRGB])\n","\n","train_stdR = np.mean([s[0] for s in train_stdRGB])\n","train_stdG = np.mean([s[1] for s in train_stdRGB])\n","train_stdB = np.mean([s[2] for s in train_stdRGB])\n","\n","test_meanRGB = [np.mean(x, axis=(1,2)) for x,_, __ in raw_test_set]\n","test_stdRGB = [np.std(x, axis=(1,2)) for x,_, __ in raw_test_set]\n","\n","test_meanR = np.mean([m[0] for m in test_meanRGB])\n","test_meanG = np.mean([m[1] for m in test_meanRGB])\n","test_meanB = np.mean([m[2] for m in test_meanRGB])\n","\n","test_stdR = np.mean([s[0] for s in test_stdRGB])\n","test_stdG = np.mean([s[1] for s in test_stdRGB])\n","test_stdB = np.mean([s[2] for s in test_stdRGB])\n","\n","\n","\n","ang = (0-train_meanR)/train_meanR\n","print(ang)\n","normalized_zero_r = (0-test_meanR)/test_stdR\n","print(normalized_zero_r)\n"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":5815,"status":"ok","timestamp":1654419943119,"user":{"displayName":"­신호중","userId":"02473414572631522916"},"user_tz":-540},"id":"D_6PGoo0snHX"},"outputs":[],"source":["train_transform = transforms.Compose([transforms.ToPILImage(),\n","                                      transforms.ToTensor(),\n","                                      transforms.Normalize([train_meanR,train_meanG,train_meanB],[train_stdR, train_stdG, train_stdB])\n","                                      ])\n","test_transform = transforms.Compose([transforms.ToPILImage(),\n","                                      transforms.ToTensor(),\n","                                     transforms.Normalize([test_meanR, test_meanG, test_meanB],[test_stdR, test_stdG, test_stdB])\n","                                      ])\n","\n","train_imgs, train_malices, train_names = [],[], []\n","test_imgs, test_malices, test_names = [],[],[]\n","\n","\n","for img,mal,name in raw_train_set:\n","  train_imgs.append(train_transform(img))\n","  train_malices.append(mal)\n","  train_names.append(name)\n","for img,mal,name in raw_test_set:\n","  test_imgs.append(test_transform(img))\n","  test_malices.append(mal)\n","  test_names.append(name)\n","\n","\n","train_set = CustomDataset(train_imgs, train_malices, train_names)\n","test_set = CustomDataset(test_imgs, test_malices, test_names)"]},{"cell_type":"markdown","metadata":{"id":"nkpbB8SF_78Z"},"source":["# 모델 정의"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1654419943120,"user":{"displayName":"­신호중","userId":"02473414572631522916"},"user_tz":-540},"id":"Bylvt4kiJfLq","outputId":"eec1d45d-c0b7-4ba3-bebb-c3fb1a22262a"},"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 25 µs, sys: 4 µs, total: 29 µs\n","Wall time: 32.4 µs\n"]}],"source":["%%time\n","class CNN(nn.Module): \n","    def __init__(self):\n","      super(CNN, self).__init__()\n","      \n","      self.layer1 = nn.Sequential(\n","          # kerner size : 필터 크기\n","          nn.Conv2d(in_channels=3, out_channels=28, kernel_size=5),\n","          nn.BatchNorm2d(28),\n","          nn.ReLU(inplace=True),\n","          nn.MaxPool2d(2),\n","          nn.Dropout(0.4)\n","      ) # output size : (이미지 width - 커널사이즈 + 2*패딩사이즈)/stride + 1 -> \n","      # (256 - 5 + 2* 0)/1 + 1 252 -> 126 126(풀링)\n","      # (128 - 5) + 1 -> 124 -> 62 (풀링)\n","      # (64 - 5 + 2* 0)/1 + 1 -> 60 -> 30 (풀링)\n","      # \n","      self.layer2 = nn.Sequential(\n","          nn.Conv2d(in_channels=28, out_channels=23, kernel_size=5),\n","          nn.BatchNorm2d(23),\n","          nn.ReLU(inplace=True),\n","          nn.MaxPool2d(2),\n","          nn.Dropout(0.4)\n","      )\n","      # \n","\n","      # 256 인경우 input : 126 * 126, 128인 경우 30*30\n","      # (126-5)/1+1 : 122 -> 61\n","      # (62 - 5) + 1 : 58 -> 풀링하면 29\n","      # (30-5) +1 -> 26, 풀링하면 13\n","      # 126 * 126 * 10 --CONV2--> 122 * 122 * 20 --MAX POOL--> 61 * 61 * 20\n","\n","      ## 60 60 \n","      \n","      # 256 256 일때 39 * 61 * 61, out_features = 183\n","      self.layer3 = nn.Sequential(\n","          nn.Linear(in_features=23 * 61 * 61, out_features=421, bias=True),\n","          nn.BatchNorm1d(421),\n","          nn.ReLU(inplace=True),\n","          nn.Dropout(0.4)\n","      )\n","\n","      self.layer4 = nn.Sequential(\n","          nn.Linear(in_features=421, out_features=227, bias=True),\n","          nn.ReLU(inplace=True),\n","          nn.Dropout(0.4)\n","      )\n","\n","      self.layer5 = nn.Sequential(\n","          nn.Linear(in_features=227, out_features=2, bias=True),\n","      )\n","\n","    def forward(self, x):\n","      x = self.layer1(x)\n","      x = self.layer2(x)\n","      x = x.view(-1, 23 * 61 * 61)\n","      x = self.layer3(x)\n","      x = self.layer4(x)\n","      x = self.layer5(x)\n","      return x"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12371,"status":"ok","timestamp":1654419955479,"user":{"displayName":"­신호중","userId":"02473414572631522916"},"user_tz":-540},"id":"1Iu66Lum1O6L","outputId":"b0a12ee5-5bbc-4835-d717-e12a7a3664f7"},"outputs":[{"output_type":"stream","name":"stdout","text":["cuda\n","CNN(\n","  (layer1): Sequential(\n","    (0): Conv2d(3, 28, kernel_size=(5, 5), stride=(1, 1))\n","    (1): BatchNorm2d(28, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (2): ReLU(inplace=True)\n","    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (4): Dropout(p=0.4, inplace=False)\n","  )\n","  (layer2): Sequential(\n","    (0): Conv2d(28, 23, kernel_size=(5, 5), stride=(1, 1))\n","    (1): BatchNorm2d(23, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (2): ReLU(inplace=True)\n","    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (4): Dropout(p=0.4, inplace=False)\n","  )\n","  (layer3): Sequential(\n","    (0): Linear(in_features=85583, out_features=421, bias=True)\n","    (1): BatchNorm1d(421, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (2): ReLU(inplace=True)\n","    (3): Dropout(p=0.4, inplace=False)\n","  )\n","  (layer4): Sequential(\n","    (0): Linear(in_features=421, out_features=227, bias=True)\n","    (1): ReLU(inplace=True)\n","    (2): Dropout(p=0.4, inplace=False)\n","  )\n","  (layer5): Sequential(\n","    (0): Linear(in_features=227, out_features=2, bias=True)\n","  )\n",")\n"]}],"source":["train_losses = []\n","valid_losses = []\n","\n","num_epochs = 93\n","batch_size = 256\n","learning_rate = 0.002329\n","weight_decay = 0.0003281\n","\n","train_loader = DataLoader(dataset = train_set, batch_size = batch_size, shuffle=True, num_workers=0)\n","test_loader = DataLoader(dataset = test_set, batch_size = batch_size, shuffle=False, num_workers=0)\n","\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","\n","model = CNN().to(device)\n","\n","criterion = nn.CrossEntropyLoss()\n","\n","optimizer = torch.optim.Adam(model.parameters(),lr = learning_rate, weight_decay=weight_decay)\n","\n","print(device)\n","print(model)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Easqnqp9AAjR"},"source":["# Training "]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1654419955479,"user":{"displayName":"­신호중","userId":"02473414572631522916"},"user_tz":-540},"id":"F-Vswb7H7sOY"},"outputs":[],"source":["# torch.cuda.empty_cache()"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":587},"id":"jgyDdPXmNDiw","executionInfo":{"status":"error","timestamp":1654419968697,"user_tz":-540,"elapsed":13220,"user":{"displayName":"­신호중","userId":"02473414572631522916"}},"outputId":"517c5120-280c-4f64-919a-6f4e0b5bef66"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 1 \tTraining Loss: 0.521583 \tValidation Loss: 1.624495\n","time : 4.767258882522583\n","Test Accuracy of the model: 50.0 %\n","Epoch: 2 \tTraining Loss: 0.361944 \tValidation Loss: 0.678951\n","time : 4.218108415603638\n","Test Accuracy of the model: 55.125 %\n"]},{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-74e8189efb9a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     34\u001b[0m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m         \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 36\u001b[0;31m         \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m         \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredicted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1108\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1109\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1110\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1111\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1112\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<timed exec>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1108\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1109\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1110\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1111\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1112\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    139\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    140\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 141\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    142\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    143\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1108\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1109\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1110\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1111\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1112\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    445\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    446\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 447\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_conv_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbias\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    448\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    449\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mConv3d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_ConvNd\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36m_conv_forward\u001b[0;34m(self, input, weight, bias)\u001b[0m\n\u001b[1;32m    442\u001b[0m                             _pair(0), self.dilation, self.groups)\n\u001b[1;32m    443\u001b[0m         return F.conv2d(input, weight, bias, self.stride,\n\u001b[0;32m--> 444\u001b[0;31m                         self.padding, self.dilation, self.groups)\n\u001b[0m\u001b[1;32m    445\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    446\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: CUDA out of memory. Tried to allocate 1.70 GiB (GPU 0; 15.78 GiB total capacity; 12.23 GiB already allocated; 1.18 GiB free; 13.18 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF"]}],"source":["# keeping-track-of-losses \n","# %%time \n","import time\n","\n","  # 현재시각 - 시작시간 = 실행 시간\n","for epoch in range(1, num_epochs + 1):\n","    # keep-track-of-training-and-validation-loss\n","    train_loss = 0.0\n","    valid_loss = 0.0\n","    \n","    # training-the-model\n","    model.train()\n","    \n","    start = time.time()\n","    for data, target,_ in train_loader:\n","        \n","        # move-tensors-to-GPU \n","        data = data.to(device)\n","        target = target.to(device)\n","        optimizer.zero_grad()\n","        output = model(data)\n","        loss = criterion(output, target)\n","        loss.backward()\n","        optimizer.step()\n","        train_loss += loss.item() * data.size(0)\n","        \n","    # validate-the-model\n","    model.eval()\n","    correct = 0\n","    total = 0\n","        \n","    for data, target,_ in test_loader:\n","        \n","        data = data.to(device)\n","        target = target.to(device)\n","        output = model(data)\n","        \n","        _, predicted = torch.max(output.data, 1)\n","        total += target.size(0)\n","        correct += (predicted == target).sum().item()\n","              \n","        loss = criterion(output, target)\n","        # update-average-validation-loss \n","        valid_loss += loss.item() * data.size(0)\n","    \n","    train_loss = train_loss/len(train_loader.sampler)\n","    valid_loss = valid_loss/len(test_loader.sampler)\n","    train_losses.append(train_loss)\n","    valid_losses.append(valid_loss)\n","    # print-training/validation-statistics \n","    print('Epoch: {} \\tTraining Loss: {:.6f} \\tValidation Loss: {:.6f}'.format(\n","        epoch, train_loss, valid_loss))\n","    print(\"time :\", time.time() - start)\n","    print('Test Accuracy of the model: {} %'.format(100 * correct / total))\n","\n","    # # test-the-model\n","    # with torch.no_grad():\n","    #     correct = 0\n","    #     total = 0\n","    #     for images, labels,_ in test_loader:\n","    #         images = images.to(device)\n","    #         labels = labels.to(device)\n","    #         outputs = model(images)\n","    #         _, predicted = torch.max(outputs.data, 1)\n","    #         total += labels.size(0)\n","    #         correct += (predicted == labels).sum().item()\n","              \n","    #     print('Test Accuracy of the model: {} %'.format(100 * correct / total))"]},{"cell_type":"markdown","metadata":{"id":"D6xyaRoqADf0"},"source":["# Testing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DZQ4RsBxT7wQ","executionInfo":{"status":"aborted","timestamp":1654419968693,"user_tz":-540,"elapsed":7,"user":{"displayName":"­신호중","userId":"02473414572631522916"}}},"outputs":[],"source":["# test-the-model\n","model.eval()  # it-disables-dropout\n","predict = []\n","with torch.no_grad():\n","    correct = 0\n","    total = 0\n","    for images, labels,_ in test_loader:\n","        images = images.to(device)\n","        labels = labels.to(device)\n","        outputs = model(images)\n","        _, predicted = torch.max(outputs.data, 1)\n","        predict.extend(predicted.detach().cpu())\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","          \n","    print('Test Accuracy of the model: {} %'.format(100 * correct / total))\n","\n","# Save \n","torch.save(model.state_dict(), 'model.ckpt')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-9WgudrNde5b","executionInfo":{"status":"aborted","timestamp":1654419968693,"user_tz":-540,"elapsed":6,"user":{"displayName":"­신호중","userId":"02473414572631522916"}}},"outputs":[],"source":["#predict\n","test_loader"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tRWUSdbKT_-o","executionInfo":{"status":"aborted","timestamp":1654419968694,"user_tz":-540,"elapsed":7,"user":{"displayName":"­신호중","userId":"02473414572631522916"}}},"outputs":[],"source":["%matplotlib inline\n","%config InlineBackend.figure_format = 'retina'\n","\n","plt.plot(train_losses, label='Training loss')\n","plt.plot(valid_losses, label='test loss')\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.legend(frameon=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4yfKvb2BblnP","executionInfo":{"status":"aborted","timestamp":1654419968694,"user_tz":-540,"elapsed":7,"user":{"displayName":"­신호중","userId":"02473414572631522916"}}},"outputs":[],"source":["from sklearn.metrics import confusion_matrix, f1_score\n","t = confusion_matrix(test_set.malices, predict)\n","f1 = f1_score(test_set.malices, predict)\n","print(t)\n","print(f'f1 score : {f1}')\n","\n","np_predict = np.array(predict)\n","np_malices = np.array(test_set.malices)\n","\n","\n","t = np_predict == np_malices # T : 정답이 맞는 경우 \n","f = np_predict != np_malices # F : 정답에 틀린 경우\n","\n","# 각 그룹의 베이직 블록 개수, 픽셀 개수, (베이직 블록 - 픽셀 개수), 그룹당 평균, 중간\n","index_true = np.where(t)[0]\n","index_false = np.where(f)[0]\n","benign_block_dir = '/content/drive/MyDrive/Malware Analysis/kisa_dataset/benign_block/'\n","malign_block_dir = '/content/drive/MyDrive/Malware Analysis/kisa_dataset/malign_block/'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"StJcDEIUNF-B","executionInfo":{"status":"aborted","timestamp":1654419968695,"user_tz":-540,"elapsed":8,"user":{"displayName":"­신호중","userId":"02473414572631522916"}}},"outputs":[],"source":["import torch\n","import math\n","\n","\n","E = 0.0000001\n","\n","def truncate(num, n):\n","    integer = int(num * (10**n))/(10**n)\n","    return float(integer)\n","\n","def get_num_pixel(tensor_r, normalized_zero_r):\n","  pixels = (tensor_r.numpy() - normalized_zero_r) > E \n","  cnt = np.count_nonzero(pixels)\n","  return cnt\n","\n","true_benign_basic_block_nums = []\n","true_malign_basic_block_nums = []\n","true_benign_pixel_nums = []\n","true_malign_pixel_nums = []\n","\n","false_benign_basic_block_nums = []\n","false_malign_basic_block_nums = []\n","false_benign_pixel_nums = []\n","false_malign_pixel_nums = []\n","\n","normalized_zero_r = (0-test_meanR)/test_stdR\n","normalized_zero_r = truncate(normalized_zero_r,8)\n","\n","demo = 400 # 최대 400까지 \n","\n","for idx in index_true[:demo]:\n","  tensor, malice, name = test_set[idx]\n","  name = name.replace('.png','.txt')\n","  path = benign_block_dir+name if malice == 0 else malign_block_dir+name\n","  # 베이직 블록 개수 세기 위해, 파일을 엽니다. \n","  block_file = open(path,'r')\n","  num_block = len(block_file.readlines())\n","  num_pixels = get_num_pixel(tensor[0], normalized_zero_r)\n","  \n","  # 베이직 블록 개수, 픽셀 개수를 입력합니다. \n","  if malice == 0:\n","    true_benign_basic_block_nums.append(num_block)\n","    true_benign_pixel_nums.append(num_pixels)\n","    \n","  else: \n","    true_malign_basic_block_nums.append(num_block)\n","    true_malign_pixel_nums.append(num_pixels)\n","\n","print()\n","for idx in index_false[:demo]:\n","  tensor, malice, name = test_set[idx]\n","  name = name.replace('.png','.txt')\n","  path = benign_block_dir+name if malice == 0 else malign_block_dir+name\n","  # 베이직 블록 개수 세기 위해, 파일을 엽니다. \n","  block_file = open(path,'r')\n","  num_block = len(block_file.readlines())\n","  num_pixels = get_num_pixel(tensor[0], normalized_zero_r)\n","  \n","  # 베이직 블록 개수, 픽셀 개수를 입력합니다. \n","  if malice == 0:\n","    false_benign_basic_block_nums.append(num_block)\n","    false_benign_pixel_nums.append(num_pixels)\n","  else: \n","    false_malign_basic_block_nums.append(num_block)\n","    false_malign_pixel_nums.append(num_pixels)\n","\n","  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hCIzODjkDc_r","executionInfo":{"status":"aborted","timestamp":1654419968695,"user_tz":-540,"elapsed":8,"user":{"displayName":"­신호중","userId":"02473414572631522916"}}},"outputs":[],"source":["# True_benign\n","# True_malign\n","# False_benign\n","# False_malign\n","def stat(block_nums, pixel_nums, label):\n","  min_block = min(block_nums)\n","  mean_block = np.mean(block_nums)\n","  min_pixels = min(pixel_nums)\n","  mean_pixels = np.mean(pixel_nums)\n","  diff = np.array(block_nums) - np.array(pixel_nums)\n","  min_diff = min(diff)\n","  mean_diff = np.mean(diff)\n","\n","  median_block = np.median(block_nums)\n","  median_pixels = np.median(pixel_nums)\n","  \n","  print(f'====={label}=====')\n","  print(f'블록 개수 평균 : {mean_block}, 픽셀 개수 평균 : {mean_pixels}, 평균 차이 : {mean_diff} 정보 손실률: {100 - (mean_pixels/mean_block) * 100}%')\n","  print(f'중간값 블록 : {median_block}, 중간값 픽셀 : {median_pixels}')\n","\n","stat(true_benign_basic_block_nums, true_benign_pixel_nums, \"True benign\")\n","stat(true_malign_basic_block_nums, true_malign_pixel_nums, 'True malign')\n","stat(false_benign_basic_block_nums, false_benign_pixel_nums, 'False benign')\n","stat(false_malign_basic_block_nums, false_malign_pixel_nums, 'False malign')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Bw4gtDnyAiVu","executionInfo":{"status":"aborted","timestamp":1654419968695,"user_tz":-540,"elapsed":7,"user":{"displayName":"­신호중","userId":"02473414572631522916"}}},"outputs":[],"source":["# 잘 구분되는 benign, malign\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"07oe1ErRh3Xx","executionInfo":{"status":"aborted","timestamp":1654419968695,"user_tz":-540,"elapsed":7,"user":{"displayName":"­신호중","userId":"02473414572631522916"}}},"outputs":[],"source":["import torch\n","import torchvision\n","import torchvision.transforms as T\n","from PIL import Image\n","\n","import matplotlib.pyplot as plt\n","import torchvision.transforms as transforms\n","\n","\n","indecies = np.where(t)[0]\n","\n","cnt = 0\n","\n","for i in indecies:\n","  # wandb.log({\"fakge\": [wandb.Image(i.reshape([256, 256, 3]), mode=\"RGB\") for i in test_set[i][0]]})\n","  tf = T.ToPILImage()\n","  img_t = tf(raw_test_set[i][0])\n","  plt.imshow(img_t)\n","  plt.show()\n","  print('ang')\n","  \n","  cnt += 1\n","  if cnt > 20 :\n","    break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ongZvkzfk9KB","executionInfo":{"status":"aborted","timestamp":1654419968696,"user_tz":-540,"elapsed":8,"user":{"displayName":"­신호중","userId":"02473414572631522916"}}},"outputs":[],"source":["indecies = np.where(f)[0]\n","\n","cnt = 0\n","\n","for i in indecies:\n","  # wandb.log({\"fakge\": [wandb.Image(i.reshape([256, 256, 3]), mode=\"RGB\") for i in test_set[i][0]]})\n","  tf = T.ToPILImage()\n","  img_t = tf(raw_test_set[i][0])\n","  plt.imshow(img_t)\n","  plt.show()\n","  print('ang')\n","  \n","  cnt += 1\n","  if cnt > 20 :\n","    break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6jDlAj5-r7oT","executionInfo":{"status":"aborted","timestamp":1654419968696,"user_tz":-540,"elapsed":8,"user":{"displayName":"­신호중","userId":"02473414572631522916"}}},"outputs":[],"source":[""]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"name":"CNN_PBL_STAT_256","provenance":[],"authorship_tag":"ABX9TyM29puMYVhS7+hozB0PWSQ0"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}