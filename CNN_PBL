{"cells":[{"cell_type":"markdown","metadata":{"id":"8cryo4QbQqHe"},"source":["# 데이터 셋 만들기"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MQOh2i1WJd4V"},"outputs":[],"source":["from IPython.display import display\n","from PIL import Image\n","\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import matplotlib.pyplot as plt\n","\n","import pandas as pd\n","import numpy as np\n","\n","import torchvision.transforms as transforms\n","\n","import os\n","\n","from matplotlib.pyplot import imshow\n","\n","from torch.utils.data import Dataset, DataLoader\n","import torch.nn.functional as F\n","\n","import matplotlib.image as img\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import confusion_matrix, f1_score\n","\n","torch.manual_seed(0)\n","torch.cuda.manual_seed(0)\n","torch.cuda.manual_seed_all(0)\n","\n","if torch.cuda.is_available():\n","    device = torch.device('cuda')\n","else:\n","    device = torch.device('cpu')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3812,"status":"ok","timestamp":1654239722065,"user":{"displayName":"­신호중","userId":"02473414572631522916"},"user_tz":-540},"id":"ERy6Fzk1AP6N","outputId":"c6fd5f27-fdc2-4c2e-ecca-1470c0981729"},"outputs":[{"output_type":"stream","name":"stderr","text":["\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mvinnyshin\u001b[0m. Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":2}],"source":["!pip install -q wandb\n","import wandb\n","wandb.login()\n","# api key 3a629afb6d101b0cc3a0123089694d3b03f196e3"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2752,"status":"ok","timestamp":1654239724812,"user":{"displayName":"­신호중","userId":"02473414572631522916"},"user_tz":-540},"id":"uptSHhfXJ366","outputId":"70040421-c25f-49fe-813d-07122e47ac8d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"E78bKNwtH1T5"},"outputs":[],"source":["class CustomDataset(Dataset):\n","        super().__init__()\n","  def __init__(self, imgs, malices, names, num_frames):\n","        self.imgs = imgs\n","        self.malices = malices\n","        self.names = names\n","        self.num_frames = num_frames\n","        \n","  def __len__(self):\n","      return len(self.imgs)\n","  '''\n","  같은 비디오인지 구분해야함.\n","  clamp 이용하면 심플해진다 ~ \n","  '''\n","  def __getitem__(self,index):\n","      return self.imgs[index], self.malices[index], self.names[index]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9Fj0resvJrpm"},"outputs":[],"source":["from zipfile import ZipFile\n","from PIL import Image\n","import zipfile\n","import cv2\n","import numpy as np\n","import random\n","\n","def convertPILImageToCV2(pil_image):\n","  np_image = np.array(pil_image)\n","  open_cv_image = np.array(pil_image) \n","\n","  open_cv_image = open_cv_image[:, :, ::-1].copy() \n","\n","  return open_cv_image\n","\n","benign_path = '/content/drive/MyDrive/Malware Analysis/kisa_dataset/benign_image.zip'\n","malign_path = '/content/drive/MyDrive/Malware Analysis/kisa_dataset/malign_image.zip'\n","benign_zip = ZipFile(benign_path,'r')\n","malign_zip = ZipFile(malign_path,'r')\n","\n","#benign\n","benign_info_list = benign_zip.infolist()\n","benign_name_list = benign_zip.namelist()\n","malign_info_list = malign_zip.infolist()\n","malign_name_list = malign_zip.namelist()\n","\n","benign_set = []\n","malign_set = []\n","\n","for i in range(len(benign_info_list)):\n","  _file = benign_zip.open(benign_info_list[i])\n","  img = Image.open(_file)\n","  img = convertPILImageToCV2(img)\n","  name = benign_name_list[i]\n","  benign_set.append((img, 0, name))\n","  \n","\n","for i in range(len(malign_info_list)):\n","  _file = malign_zip.open(malign_info_list[i])\n","  img = Image.open(_file)\n","  img = convertPILImageToCV2(img)\n","  name = malign_name_list[i]\n","  malign_set.append((img, 1, name))\n","  \n","\n","#데이터 셔플링\n","random.shuffle(benign_set)\n","random.shuffle(malign_set)\n","# 셔플된 데이터에서 테스트셋, 트레인셋 구성.\n","\n","num_each_test = 400\n","\n","raw_test_set = benign_set[:num_each_test] + malign_set[:num_each_test]\n","random.shuffle(raw_test_set)\n","raw_train_set = benign_set[num_each_test:] + malign_set[num_each_test:]\n","random.shuffle(raw_train_set)\n"]},{"cell_type":"markdown","metadata":{"id":"Hn0zewKXsCDS"},"source":["## Normalizing"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7542,"status":"ok","timestamp":1654239738554,"user":{"displayName":"­신호중","userId":"02473414572631522916"},"user_tz":-540},"id":"ALEm0HfVqnbW","outputId":"5bbef4d6-fff1-4612-97c6-a147d20c65f3"},"outputs":[{"output_type":"stream","name":"stdout","text":["-0.10809985121652183\n"]}],"source":["train_meanRGB = [np.mean(x, axis=(1,2)) for x,_, __ in raw_train_set]\n","train_stdRGB = [np.std(x, axis=(1,2)) for x,_, __ in raw_train_set]\n","\n","train_meanR = np.mean([m[0] for m in train_meanRGB])\n","train_meanG = np.mean([m[1] for m in train_meanRGB])\n","train_meanB = np.mean([m[2] for m in train_meanRGB])\n","\n","train_stdR = np.mean([s[0] for s in train_stdRGB])\n","train_stdG = np.mean([s[1] for s in train_stdRGB])\n","train_stdB = np.mean([s[2] for s in train_stdRGB])\n","\n","\n","test_meanRGB = [np.mean(x, axis=(1,2)) for x,_, __ in raw_test_set]\n","test_stdRGB = [np.std(x, axis=(1,2)) for x,_, __ in raw_test_set]\n","\n","test_meanR = np.mean([m[0] for m in test_meanRGB])\n","test_meanG = np.mean([m[1] for m in test_meanRGB])\n","test_meanB = np.mean([m[2] for m in test_meanRGB])\n","\n","test_stdR = np.mean([s[0] for s in test_stdRGB])\n","test_stdG = np.mean([s[1] for s in test_stdRGB])\n","test_stdB = np.mean([s[2] for s in test_stdRGB])\n","\n","normalized_zero_r = (0-test_meanR)/test_stdR\n","print(normalized_zero_r)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D_6PGoo0snHX"},"outputs":[],"source":["train_transform = transforms.Compose([transforms.ToPILImage(),\n","                                      transforms.ToTensor(),\n","                                      transforms.Normalize([train_meanR,train_meanG,train_meanB],[train_stdR, train_stdG, train_stdB])\n","                                      ])\n","test_transform = transforms.Compose([transforms.ToPILImage(),\n","                                      transforms.ToTensor(),\n","                                     transforms.Normalize([test_meanR, test_meanG, test_meanB],[test_stdR, test_stdG, test_stdB])\n","                                      ])\n","\n","train_imgs, train_malices, train_names = [],[], []\n","test_imgs, test_malices, test_names = [],[],[]\n","\n","\n","for img,mal,name in raw_train_set:\n","  train_imgs.append(train_transform(img))\n","  train_malices.append(mal)\n","  train_names.append(name)\n","for img,mal,name in raw_test_set:\n","  test_imgs.append(test_transform(img))\n","  test_malices.append(mal)\n","  test_names.append(name)\n","\n","\n","train_set = CustomDataset(train_imgs, train_malices, train_names)\n","test_set = CustomDataset(test_imgs, test_malices, test_names)"]},{"cell_type":"markdown","metadata":{"id":"nkpbB8SF_78Z"},"source":["# 모델 정의"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"elapsed":3106,"status":"ok","timestamp":1654239742094,"user":{"displayName":"­신호중","userId":"02473414572631522916"},"user_tz":-540},"id":"KffiMQVHGhgj","outputId":"89b04546-369c-4ed2-d6be-826ca2ae3f34"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["Tracking run with wandb version 0.12.17"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["Run data is saved locally in <code>/content/wandb/run-20220603_070218-19fp7oom</code>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["Syncing run <strong><a href=\"https://wandb.ai/vinnyshin/Malware_analysis/runs/19fp7oom\" target=\"_blank\">unique-wind-372</a></strong> to <a href=\"https://wandb.ai/vinnyshin/Malware_analysis\" target=\"_blank\">Weights & Biases</a> (<a href=\"https://wandb.me/run\" target=\"_blank\">docs</a>)<br/>"]},"metadata":{}}],"source":["hyperparameter_defaults = dict(\n","    dataset = \"MALWARE\",\n","    gpu = \"colab\",\n","    dropout = 0.3,\n","    layer_1_out_channels = 10,\n","    layer_2_out_channels = 20,\n","    layer_3_out_channels = 30,\n","    layer_4_out_features = 300,\n","    layer_5_out_features = 150,\n","    layer_6_out_features = 75,\n","    batch_size = 256,\n","    learning_rate = 0.001,\n","    weight_decay = 1e-5,\n","    epochs = 80,\n","    kernel_size = 5,\n","    )\n","\n","wandb.init(config=hyperparameter_defaults, project=\"Malware_analysis\")\n","config = wandb.config"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2616,"status":"ok","timestamp":1654239744705,"user":{"displayName":"­신호중","userId":"02473414572631522916"},"user_tz":-540},"id":"-BY72r3zfRnx","outputId":"2c7d0f4e-4bf0-4e5f-b1b1-c111615be209"},"outputs":[{"output_type":"stream","name":"stdout","text":["Create sweep with ID: 8tm94kg8\n","Sweep URL: https://wandb.ai/vinnyshin/Malware_analysis/sweeps/8tm94kg8\n"]}],"source":["sweep_config = {\n","  \"name\" : \"deep-layer\",\n","  \"method\" : \"random\",\n","  \"metric\" : {\n","      \"goal\" : \"minimize\",\n","      \"name\" : \"valid_loss\"\n","  },\n","  \"parameters\" : {\n","    \"epochs\": {\n","      \"distribution\" : \"int_uniform\",\n","      \"min\" : 10,\n","      \"max\" : 200,\n","    },\n","    \"dropout\" : {\n","      \"values\" : [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n","    },\n","    \"dropout2\" : {\n","      \"values\" : [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n","    },\n","    \"dropout3\" : {\n","      \"values\" : [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n","    },\n","    \"layer_1_out_channels\" : {\n","        \"distribution\" : \"int_uniform\",\n","        \"min\" : 10,\n","        \"max\" : 30,\n","    },\n","    \"layer_2_out_channels\" : {\n","        \"distribution\" : \"int_uniform\",\n","        \"min\" : 20,\n","        \"max\" : 40,\n","    },\n","    \"layer_3_out_channels\" : {\n","        \"distribution\" : \"int_uniform\",\n","        \"min\" : 30,\n","        \"max\" : 50,\n","    },\n","    \"layer_4_out_features\" : {\n","        \"distribution\" : \"int_uniform\",\n","        \"min\" : 300,\n","        \"max\" : 500,\n","    },\n","    \"layer_5_out_features\" : {\n","        \"distribution\" : \"int_uniform\",\n","        \"min\" : 100,\n","        \"max\" : 300,\n","    },\n","    \"layer_6_out_features\" : {\n","        \"distribution\" : \"int_uniform\",\n","        \"min\" : 30,\n","        \"max\" : 100,\n","    },\n","    \"learning_rate\" : {\n","        \"distribution\" : \"log_uniform_values\",\n","        \"min\": 1e-4,\n","        \"max\": 1e-1,\n","    },\n","    \"weight_decay\" : {\n","        \"distribution\" : \"log_uniform_values\",\n","        \"min\": 1e-4,\n","        \"max\": 1e-1,\n","    }\n","  },\n","  \"early_terminate\": {\n","      \"type\": \"hyperband\",\n","      \"eta\" : 3,\n","      \"min_iter\" : 3,\n","  }\n","}\n","\n","sweep_id = wandb.sweep(sweep_config, project=\"Malware_analysis\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Bylvt4kiJfLq"},"outputs":[],"source":["class CNN(nn.Module): \n","    def __init__(self, config):\n","      super(CNN, self).__init__()\n","      self.config = config\n","\n","      self.image_size = 256\n","\n","      self.layer1 = nn.Sequential(\n","          nn.Conv2d(in_channels=3, out_channels=config.layer_1_out_channels, kernel_size=5),\n","          nn.BatchNorm2d(config.layer_1_out_channels),\n","          nn.ReLU(inplace=True),\n","          nn.MaxPool2d(2),\n","          nn.Dropout(config.dropout)\n","      )\n","\n","      self.image_size = int(((self.image_size - 5) + 1) / 2)\n","\n","      self.layer2 = nn.Sequential(\n","          nn.Conv2d(in_channels=config.layer_1_out_channels, out_channels=config.layer_2_out_channels, kernel_size=5),\n","          nn.BatchNorm2d(config.layer_2_out_channels),\n","          nn.ReLU(inplace=True),\n","          nn.MaxPool2d(2),\n","          nn.Dropout(config.dropout)\n","      )\n","\n","      self.image_size = int(((self.image_size - 5) + 1) / 2)\n","\n","      self.layer3 = nn.Sequential(\n","          nn.Conv2d(in_channels=config.layer_2_out_channels, out_channels=config.layer_3_out_channels, kernel_size=5),\n","          nn.BatchNorm2d(config.layer_3_out_channels),\n","          nn.ReLU(inplace=True),\n","          nn.MaxPool2d(2),\n","          nn.Dropout(config.dropout)\n","      )\n","\n","      self.image_size = int(((self.image_size - 5) + 1) / 2)\n","      \n","      self.layer4 = nn.Sequential(\n","          nn.Linear(in_features= config.layer_3_out_channels * self.image_size * self.image_size, out_features=config.layer_4_out_features, bias=True),\n","          nn.BatchNorm1d(config.layer_4_out_features),\n","          nn.ReLU(inplace=True),\n","          nn.Dropout(config.dropout2)\n","      )\n","\n","      self.layer5 = nn.Sequential(\n","          nn.Linear(in_features= config.layer_4_out_features, out_features=config.layer_5_out_features, bias=True),\n","          nn.BatchNorm1d(config.layer_5_out_features),\n","          nn.ReLU(inplace=True),\n","          nn.Dropout(config.dropout2)\n","      )\n","\n","      self.layer6 = nn.Sequential(\n","          nn.Linear(in_features= config.layer_5_out_features, out_features=config.layer_6_out_features, bias=True),\n","          # nn.BatchNorm1d(config.layer_6_out_features),\n","          nn.ReLU(inplace=True),\n","          nn.Dropout(config.dropout3)\n","      )\n","\n","      self.layer7 = nn.Sequential(\n","          nn.Linear(in_features=config.layer_6_out_features, out_features=2, bias=True),\n","      )\n","\n","    def forward(self, x):\n","      x = self.layer1(x)\n","      x = self.layer2(x)\n","      x = self.layer3(x)\n","      x = x.view(-1, self.config.layer_3_out_channels * self.image_size * self.image_size)\n","      x = self.layer4(x)\n","      x = self.layer5(x)\n","      x = self.layer6(x)\n","      x = self.layer7(x)\n","      return x"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"F-Vswb7H7sOY"},"outputs":[],"source":["# torch.cuda.empty_cache()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1Iu66Lum1O6L"},"outputs":[],"source":["train_loader = DataLoader(dataset = train_set, batch_size = config.batch_size, shuffle=True, num_workers=0)\n","test_loader = DataLoader(dataset = test_set, batch_size = config.batch_size, shuffle=False, num_workers=0)"]},{"cell_type":"markdown","metadata":{"id":"Easqnqp9AAjR"},"source":["# Training "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jgyDdPXmNDiw"},"outputs":[],"source":["def train():\n","  with wandb.init() as run:\n","    train_losses = []\n","    valid_losses = []\n","    \n","    config = wandb.config\n","\n","    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","    criterion = nn.CrossEntropyLoss()\n","    \n","    model = CNN(config).to(device)\n","    optimizer = torch.optim.Adam(model.parameters(),lr = config.learning_rate, weight_decay=config.weight_decay)\n","\n","    max_f1 = 0\n","\n","    for epoch in range(1, config.epochs + 1):\n","        # keep-track-of-training-and-validation-loss\n","        train_loss = 0.0\n","        valid_loss = 0.0\n","        \n","        # training-the-model\n","        model.train()\n","        \n","        for data, target,_ in train_loader:\n","            \n","            # move-tensors-to-GPU \n","            data = data.to(device)\n","            target = target.to(device)\n","            \n","            # clear-the-gradients-of-all-optimized-variables\n","            optimizer.zero_grad()\n","            # forward-pass: compute-predicted-outputs-by-passing-inputs-to-the-model\n","            output = model(data)\n","            # calculate-the-batch-loss\n","            loss = criterion(output, target)\n","            # backward-pass: compute-gradient-of-the-loss-wrt-model-parameters\n","            loss.backward()\n","            # perform-a-ingle-optimization-step (parameter-update)\n","            optimizer.step()\n","            # update-training-loss\n","            train_loss += loss.item() * data.size(0)\n","            \n","        # validate-the-model\n","        model.eval()\n","\n","        correct = 0\n","        total = 0\n","        predict = []\n","        with torch.no_grad():\n","          for data, target,_ in test_loader:\n","              \n","              data = data.to(device)\n","              target = target.to(device)\n","              output = model(data)\n","\n","              loss = criterion(output, target)\n","              # update-average-validation-loss \n","              valid_loss += loss.item() * data.size(0)\n","\n","              _, predicted = torch.max(output.data, 1)\n","              predict.extend(predicted.detach().cpu())\n","              total += target.size(0)\n","              correct += (predicted == target).sum().item()\n","          # calculate-average-losses\n","          train_loss = train_loss/len(train_loader.sampler)\n","          valid_loss = valid_loss/len(test_loader.sampler)\n","          train_losses.append(train_loss)\n","          valid_losses.append(valid_loss)\n","          # print-training/validation-statistics \n","          print('Epoch: {} \\tTraining Loss: {:.6f} \\tValidation Loss: {:.6f}'.format(\n","              epoch, train_loss, valid_loss))\n","          f1 = f1_score(test_set.malices, predict)\n","          if (max_f1 < f1):\n","            max_f1 = f1\n","          \n","          print('f1 score of the model: {}'.format(f1))\n","          print('Test Accuracy of the model: {} %'.format(100 * correct / total))\n","          \n","          wandb.log({\n","              \"train_loss\": train_loss,\n","              \"valid_loss\": valid_loss,\n","              \"f1_score\": f1,\n","              \"Accuracy\": 100 * correct / total,\n","          })"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MLpgbyMOfVWL"},"outputs":[],"source":["count = 300\n","wandb.agent(sweep_id, function=train, count=count)"]},{"cell_type":"markdown","metadata":{"id":"D6xyaRoqADf0"},"source":["# Testing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DZQ4RsBxT7wQ","colab":{"base_uri":"https://localhost:8080/","height":240},"executionInfo":{"status":"error","timestamp":1654307180595,"user_tz":-540,"elapsed":760,"user":{"displayName":"­신호중","userId":"02473414572631522916"}},"outputId":"64ee61bd-80ab-4bbe-c607-ed65f9b98d4d"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-a568ce904d57>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# test-the-model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# it-disables-dropout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mpredict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mno_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mcorrect\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"]}],"source":["# test-the-model\n","model.eval()  # it-disables-dropout\n","predict = []\n","with torch.no_grad():\n","    correct = 0\n","    total = 0\n","    for images, labels,_ in test_loader:\n","        images = images.to(device)\n","        labels = labels.to(device)\n","        outputs = model(images)\n","        _, predicted = torch.max(outputs.data, 1)\n","        predict.extend(predicted.detach().cpu())\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","          \n","    print('Test Accuracy of the model: {} %'.format(100 * correct / total))\n","\n","# Save \n","torch.save(model.state_dict(), 'model.ckpt')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tRWUSdbKT_-o"},"outputs":[],"source":["%matplotlib inline\n","%config InlineBackend.figure_format = 'retina'\n","\n","plt.plot(train_losses, label='Training loss')\n","plt.plot(valid_losses, label='test loss')\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.legend(frameon=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4yfKvb2BblnP"},"outputs":[],"source":["from sklearn.metrics import confusion_matrix, f1_score\n","t = confusion_matrix(test_set.malices, predict)\n","f1 = f1_score(test_set.malices, predict)\n","print(t)\n","\n","np_predict = np.array(predict)\n","np_malices = np.array(test_set.malices)\n","\n","\n","t = np_predict == np_malices # T : 정답이 맞는 경우 \n","f = np_predict != np_malices # F : 정답에 틀린 경우\n","\n","# 각 그룹의 베이직 블록 개수, 픽셀 개수, (베이직 블록 - 픽셀 개수), 그룹당 평균, 중간\n","index_true = np.where(t)[0]\n","index_false = np.where(f)[0]\n","benign_block_dir = '/content/drive/MyDrive/Malware Analysis/kisa_dataset/benign_block/'\n","malign_block_dir = '/content/drive/MyDrive/Malware Analysis/kisa_dataset/malign_block/'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KwzJfG_BbrAo"},"outputs":[],"source":["import torch\n","import math\n","\n","\n","E = 0.0000001\n","\n","def truncate(num, n):\n","    integer = int(num * (10**n))/(10**n)\n","    return float(integer)\n","\n","def get_num_pixel(tensor_r, normalized_zero_r):\n","  pixels = (tensor_r.numpy() - normalized_zero_r) > E \n","  cnt = np.count_nonzero(pixels)\n","  return cnt\n","\n","true_benign_basic_block_nums = []\n","true_malign_basic_block_nums = []\n","true_benign_pixel_nums = []\n","true_malign_pixel_nums = []\n","\n","false_benign_basic_block_nums = []\n","false_malign_basic_block_nums = []\n","false_benign_pixel_nums = []\n","false_malign_pixel_nums = []\n","\n","normalized_zero_r = (0-test_meanR)/test_stdR\n","normalized_zero_r = truncate(normalized_zero_r,8)\n","\n","demo = 40 # 최대 400까지 \n","\n","for idx in index_true[:demo]:\n","  tensor, malice, name = test_set[idx]\n","  name = name.replace('.png','.txt')\n","  path = benign_block_dir+name if malice == 0 else malign_block_dir+name\n","  # 베이직 블록 개수 세기 위해, 파일을 엽니다. \n","  block_file = open(path,'r')\n","  num_block = len(block_file.readlines())\n","  num_pixels = get_num_pixel(tensor[0], normalized_zero_r)\n","  \n","  # 베이직 블록 개수, 픽셀 개수를 입력합니다. \n","  if malice == 0:\n","    true_benign_basic_block_nums.append(num_block)\n","    true_benign_pixel_nums.append(num_pixels)\n","    \n","  else: \n","    true_malign_basic_block_nums.append(num_block)\n","    true_malign_pixel_nums.append(num_pixels)\n","\n","print()\n","for idx in index_false[:demo]:\n","  tensor, malice, name = test_set[idx]\n","  name = name.replace('.png','.txt')\n","  path = benign_block_dir+name if malice == 0 else malign_block_dir+name\n","  # 베이직 블록 개수 세기 위해, 파일을 엽니다. \n","  block_file = open(path,'r')\n","  num_block = len(block_file.readlines())\n","  num_pixels = get_num_pixel(tensor[0], normalized_zero_r)\n","  \n","  # 베이직 블록 개수, 픽셀 개수를 입력합니다. \n","  if malice == 0:\n","    false_benign_basic_block_nums.append(num_block)\n","    false_benign_pixel_nums.append(num_pixels)\n","  else: \n","    false_malign_basic_block_nums.append(num_block)\n","    false_malign_pixel_nums.append(num_pixels)\n","\n","  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KlZCEd_Cbs73"},"outputs":[],"source":["# True_benign\n","# True_malign\n","# False_benign\n","# False_malign\n","def stat(block_nums, pixel_nums, label):\n","  min_block = min(block_nums)\n","  mean_block = np.mean(block_nums)\n","  min_pixels = min(pixel_nums)\n","  mean_pixels = np.mean(pixel_nums)\n","  diff = np.array(block_nums) - np.array(pixel_nums)\n","  min_diff = min(diff)\n","  mean_diff = np.mean(diff)\n","\n","  median_block = np.median(block_nums)\n","  median_pixels = np.median(pixel_nums)\n","  \n","  print(f'====={label}=====')\n","  print(f'블록 개수 평균 : {mean_block}, 픽셀 개수 평균 : {mean_pixels}, 평균 차이 : {mean_diff} 소실률: {(mean_pixels/mean_block) * 100}%')\n","  print(f'중간값 블록 : {median_block}, 중간값 픽셀 : {median_pixels}')\n","\n","stat(true_benign_basic_block_nums, true_benign_pixel_nums, \"True benign\")\n","stat(true_malign_basic_block_nums, true_malign_pixel_nums, 'True malign')\n","stat(false_benign_basic_block_nums, false_benign_pixel_nums, 'False benign')\n","stat(false_malign_basic_block_nums, false_malign_pixel_nums, 'False malign')"]},{"cell_type":"markdown","metadata":{"id":"zIUNYheFPvTI"},"source":["## Visualization "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"07oe1ErRh3Xx"},"outputs":[],"source":["import torch\n","import torchvision\n","import torchvision.transforms as T\n","from PIL import Image\n","\n","import matplotlib.pyplot as plt\n","import torchvision.transforms as transforms\n","\n","\n","indecies = np.where(t)[0]\n","\n","cnt = 0\n","\n","for i in indecies:\n","  # wandb.log({\"fakge\": [wandb.Image(i.reshape([256, 256, 3]), mode=\"RGB\") for i in test_set[i][0]]})\n","  tf = T.ToPILImage()\n","  img_t = tf(raw_test_set[i][0])\n","  plt.imshow(img_t)\n","  plt.show()\n","  print('ang')\n","  \n","  cnt += 1\n","  if cnt > 20 :\n","    break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ongZvkzfk9KB"},"outputs":[],"source":["indecies = np.where(f)[0]\n","\n","cnt = 0\n","\n","for i in indecies:\n","  # wandb.log({\"fakge\": [wandb.Image(i.reshape([256, 256, 3]), mode=\"RGB\") for i in test_set[i][0]]})\n","  tf = T.ToPILImage()\n","  img_t = tf(raw_test_set[i][0])\n","  plt.imshow(img_t)\n","  plt.show()\n","  print('ang')\n","  \n","  cnt += 1\n","  if cnt > 20 :\n","    break\n"]}],"metadata":{"accelerator":"GPU","colab":{"background_execution":"on","collapsed_sections":[],"machine_shape":"hm","name":"CNN_PBL","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}